name: 'Terraform CI'

on:
  push:
    branches:
      - main

jobs:
  terraform_test:
    name: 'Terraform Test'
    runs-on: ubuntu-latest
    environment: test

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}
      
      # format code
      - name: Terraform Format
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform fmt
      
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform plan --var-file=values.tfvars
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}


  terraform_deployment:
    name: 'Terraform Deployment'
    runs-on: ubuntu-latest
    needs:
      - terraform_test
    environment: deployment

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

      # format code
      - name: Terraform Format
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform fmt

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform plan --var-file=values.tfvars
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

      # applies terraform configuration
      - name: Terraform Apply
        working-directory: ./Task-1_CI-CD-Terraform
        run: terraform apply -auto-approve --var-file=values.tfvars
        env:
          GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}